/**
 * üß™ TESTES DE DEMONSTRA√á√ÉO - PORTAL BETTINA
 *
 * Testes pr√°ticos do sistema de desenvolvimento faseado
 * Demonstra como usar e ativar funcionalidades gradualmente
 *
 * @author GitHub Copilot
 * @since 2024
 */

import {
  PortalBettinaController,
  demonstratePortalBettina,
} from '../src/utils/portalBettinaController.js'
import {
  enableFeature,
  disableFeature,
  isFeatureEnabled,
  enablePhase,
  enableOnlyEssentials,
} from '../src/utils/featureFlags.js'

/**
 * üéØ SUITE DE TESTES DEMONSTRATIVOS
 */
export class DemonstrationTests {
  constructor() {
    this.controller = new PortalBettinaController()
    this.testResults = []
  }

  /**
   * üöÄ Executa todos os testes demonstrativos
   */
  async runAllTests() {
    console.log('üß™ INICIANDO TESTES DEMONSTRATIVOS DO PORTAL BETTINA\n')
    console.log('='.repeat(70))

    try {
      await this.testInitialization()
      await this.testGradualActivation()
      await this.testNewMethods()
      await this.testFallbackMethods()
      await this.testProductionMode()
      await this.testMaintenanceMode()

      this.showTestSummary()
    } catch (error) {
      console.error('‚ùå Erro durante os testes:', error)
    }
  }

  /**
   * üîß Teste de inicializa√ß√£o
   */
  async testInitialization() {
    console.log('\nüìã TESTE 1: Inicializa√ß√£o do Sistema')
    console.log('-'.repeat(50))

    try {
      const status = await this.controller.initialize()
      console.log('‚úÖ Sistema inicializado com sucesso')
      console.log(`   - Funcionalidades ativas: ${status.enabledFeatures}`)
      console.log(`   - Ambiente: ${status.environment}`)

      this.addTestResult('Inicializa√ß√£o', true, 'Sistema inicializado corretamente')
    } catch (error) {
      console.log('‚ùå Falha na inicializa√ß√£o:', error.message)
      this.addTestResult('Inicializa√ß√£o', false, error.message)
    }
  }

  /**
   * üìä Teste de ativa√ß√£o gradual
   */
  async testGradualActivation() {
    console.log('\nüìã TESTE 2: Ativa√ß√£o Gradual de Funcionalidades')
    console.log('-'.repeat(50))

    try {
      // Testar cada fase
      const phases = [
        { name: 'Essenciais', func: () => enableOnlyEssentials() },
        { name: 'Fase 1', func: () => enablePhase(1) },
        { name: 'Fase 2', func: () => enablePhase(2) },
        { name: 'Fase 3', func: () => enablePhase(3) },
      ]

      phases.forEach((phase) => {
        phase.func()
        const criticalActive = isFeatureEnabled('COGNITIVE_ASSESSMENT', 'assessCognitiveLevel')
        console.log(`   ${phase.name}: assessCognitiveLevel ${criticalActive ? '‚úÖ' : '‚ùå'}`)
      })

      this.addTestResult('Ativa√ß√£o Gradual', true, 'Todas as fases funcionando')
    } catch (error) {
      console.log('‚ùå Erro na ativa√ß√£o gradual:', error.message)
      this.addTestResult('Ativa√ß√£o Gradual', false, error.message)
    }
  }

  /**
   * üî¨ Teste dos novos m√©todos
   */
  async testNewMethods() {
    console.log('\nüìã TESTE 3: Novos M√©todos Implementados')
    console.log('-'.repeat(50))

    // Ativar funcionalidades para teste
    enablePhase(2)

    const testData = {
      attention: { sustained: 0.7, selective: 0.6, divided: 0.5 },
      memory: { working: 0.8, shortTerm: 0.7, longTerm: 0.6 },
      executive: { planning: 0.6, inhibition: 0.5, monitoring: 0.7 },
      processing: { speed: 0.7, accuracy: 0.8, flexibility: 0.5 },
      verbalCommunication: 0.6,
      nonVerbalCommunication: 0.4,
      socialCommunication: 0.5,
      dailyLiving: 0.7,
      selfCare: 0.8,
      independence: 0.6,
    }

    const newMethods = [
      {
        name: 'assessCognitiveLevel',
        method: () => this.controller.analyzer.assessCognitiveLevel(testData),
      },
      {
        name: 'assessCommunicationLevel',
        method: () => this.controller.analyzer.assessCommunicationLevel(testData),
      },
      {
        name: 'assessSocialSkillsLevel',
        method: () => this.controller.analyzer.assessSocialSkillsLevel(testData),
      },
      {
        name: 'assessAdaptiveSkills',
        method: () => this.controller.analyzer.assessAdaptiveSkills(testData),
      },
      {
        name: 'calculateExecutiveFunctionScore',
        method: () => this.controller.analyzer.calculateExecutiveFunctionScore(testData),
      },
    ]

    let successCount = 0

    for (const methodTest of newMethods) {
      try {
        const result = methodTest.method()
        console.log(`   ‚úÖ ${methodTest.name}: ${result.level || result.overallLevel}`)
        successCount++
      } catch (error) {
        console.log(`   ‚ùå ${methodTest.name}: ${error.message}`)
      }
    }

    const success = successCount === newMethods.length
    this.addTestResult(
      'Novos M√©todos',
      success,
      `${successCount}/${newMethods.length} m√©todos funcionando`
    )
  }

  /**
   * üõ°Ô∏è Teste de m√©todos de fallback
   */
  async testFallbackMethods() {
    console.log('\nüìã TESTE 4: M√©todos de Fallback')
    console.log('-'.repeat(50))

    // Desativar todas as funcionalidades avan√ßadas
    enableOnlyEssentials()

    const testData = {
      attention: { sustained: 0.5, selective: 0.4, divided: 0.3 },
    }

    try {
      // Tentar usar m√©todo que deve usar fallback
      const result = this.controller.analyzer.assessCognitiveLevel(testData)
      console.log('   ‚úÖ Fallback funcionando: n√≠vel', result.level)
      console.log('   ‚úÖ Sistema n√£o quebrou com funcionalidade desabilitada')

      this.addTestResult('Fallback', true, 'M√©todos de fallback funcionando corretamente')
    } catch (error) {
      console.log('   ‚ùå Fallback falhou:', error.message)
      this.addTestResult('Fallback', false, 'Fallback n√£o funcionou')
    }
  }

  /**
   * üè≠ Teste do modo produ√ß√£o
   */
  async testProductionMode() {
    console.log('\nüìã TESTE 5: Modo Produ√ß√£o')
    console.log('-'.repeat(50))

    // Simular ambiente de produ√ß√£o
    const originalEnv = process.env.NODE_ENV
    process.env.NODE_ENV = 'production'

    try {
      // Reinicializar em modo produ√ß√£o
      const newController = new PortalBettinaController()
      await newController.initialize()

      const status = newController.getSystemStatus()
      console.log(`   ‚úÖ Ambiente: ${status.environment}`)
      console.log(`   ‚úÖ Funcionalidades ativas: ${status.enabledFeatures}`)
      console.log(`   ‚úÖ Modo conservador: ${status.enabledFeatures < 10 ? 'Sim' : 'N√£o'}`)

      this.addTestResult('Modo Produ√ß√£o', true, 'Configura√ß√£o correta para produ√ß√£o')
    } catch (error) {
      console.log('   ‚ùå Erro no modo produ√ß√£o:', error.message)
      this.addTestResult('Modo Produ√ß√£o', false, error.message)
    }

    // Restaurar ambiente
    process.env.NODE_ENV = originalEnv
  }

  /**
   * üîß Teste do modo manuten√ß√£o
   */
  async testMaintenanceMode() {
    console.log('\nüìã TESTE 6: Modo Manuten√ß√£o')
    console.log('-'.repeat(50))

    try {
      // Ativar modo manuten√ß√£o
      this.controller.enableMaintenanceMode()

      // Verificar se apenas essenciais est√£o ativos
      const criticalActive = isFeatureEnabled('COGNITIVE_ASSESSMENT', 'assessWorkingMemory')
      const advancedActive = isFeatureEnabled('COGNITIVE_ASSESSMENT', 'assessCognitiveLevel')

      console.log(`   ‚úÖ Essenciais ativos: ${criticalActive ? 'Sim' : 'N√£o'}`)
      console.log(`   ‚úÖ Avan√ßados desativados: ${!advancedActive ? 'Sim' : 'N√£o'}`)

      this.addTestResult(
        'Modo Manuten√ß√£o',
        criticalActive && !advancedActive,
        'Modo manuten√ß√£o funcionando'
      )
    } catch (error) {
      console.log('   ‚ùå Erro no modo manuten√ß√£o:', error.message)
      this.addTestResult('Modo Manuten√ß√£o', false, error.message)
    }
  }

  /**
   * üìù Adiciona resultado de teste
   */
  addTestResult(testName, success, message) {
    this.testResults.push({
      test: testName,
      success,
      message,
      timestamp: new Date().toISOString(),
    })
  }

  /**
   * üìä Mostra resumo dos testes
   */
  showTestSummary() {
    console.log('\nüìä RESUMO DOS TESTES')
    console.log('='.repeat(70))

    const passed = this.testResults.filter((r) => r.success).length
    const total = this.testResults.length
    const percentage = Math.round((passed / total) * 100)

    console.log(`\n‚úÖ Testes aprovados: ${passed}/${total} (${percentage}%)`)
    console.log(`‚ùå Testes falharam: ${total - passed}/${total}`)

    console.log('\nüìã Detalhes:')
    this.testResults.forEach((result) => {
      const status = result.success ? '‚úÖ' : '‚ùå'
      console.log(`   ${status} ${result.test}: ${result.message}`)
    })

    if (percentage >= 80) {
      console.log('\nüéâ SISTEMA APROVADO PARA DEPLOYMENT!')
    } else {
      console.log('\n‚ö†Ô∏è Sistema precisa de ajustes antes do deployment')
    }

    console.log('\n='.repeat(70))
  }
}

/**
 * üéØ DEMONSTRA√á√ÉO INTERATIVA
 */
export async function runInteractiveDemo() {
  console.log('üåü DEMONSTRA√á√ÉO INTERATIVA DO PORTAL BETTINA\n')

  // Executar demonstra√ß√£o principal
  const controller = await demonstratePortalBettina()

  console.log('\nüîß CONTROLES DISPON√çVEIS:')
  console.log('- controller.enableCriticalFeatures() - Ativar funcionalidades cr√≠ticas')
  console.log('- controller.enableMaintenanceMode() - Modo manuten√ß√£o')
  console.log('- controller.getSystemStatus() - Status do sistema')
  console.log('- controller.demonstrateGradualActivation() - Demo gradual')

  return controller
}

/**
 * üß™ EXECUTAR TESTES SE CHAMADO DIRETAMENTE
 */
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('üöÄ Executando testes de demonstra√ß√£o...\n')

  const demo = new DemonstrationTests()
  await demo.runAllTests()

  console.log('\nüéØ Para demonstra√ß√£o interativa, use: runInteractiveDemo()')
}

export default DemonstrationTests
