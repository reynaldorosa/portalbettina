// verificar-imports-logger.js
// Script para verificar se todas as importa√ß√µes do logger est√£o corretas

console.log('üîç Iniciando verifica√ß√£o de importa√ß√µes do logger...')

// Importa o logger diretamente para verificar se √© uma exporta√ß√£o default v√°lida
import logger from './src/utils/logger.js'

// Fun√ß√£o para verificar se o logger √© v√°lido
function verificarLogger(origem, loggerObj) {
  console.log(`\nüìã Verificando logger importado de: ${origem}`)

  if (!loggerObj) {
    console.error(`‚ùå ERRO: Logger n√£o definido em: ${origem}`)
    return false
  }

  // Verificar se tem os m√©todos esperados do logger
  const metodos = ['info', 'error', 'warn', 'debug']
  const metodosPresentes = metodos.filter((m) => typeof loggerObj[m] === 'function')

  if (metodosPresentes.length === metodos.length) {
    console.log(`‚úÖ SUCESSO: Logger de ${origem} possui todos os m√©todos necess√°rios`)
    // Testar um log para verificar a funcionalidade
    loggerObj.info(`Teste de logger de ${origem}`, { testeId: Date.now() })
    return true
  } else {
    console.error(
      `‚ùå ERRO: Logger de ${origem} est√° incompleto. M√©todos presentes: ${metodosPresentes.join(', ')}`
    )
    console.error(`M√©todos esperados: ${metodos.join(', ')}`)
    return false
  }
}

// Verificar logger principal
if (verificarLogger('utils/logger.js (direct)', logger)) {
  console.log('\n‚úÖ Logger exportado corretamente como default!')
} else {
  console.log('\n‚ùå PROBLEMA com a exporta√ß√£o default do logger!')
}

// Importar m√≥dulos que usam o logger para verificar
async function verificarModulos() {
  try {
    // Core modules
    const { getMachineLearningOrchestrator } = await import(
      './src/core/MachineLearningOrchestrator.js'
    )
    const mlOrch = getMachineLearningOrchestrator()
    console.log('\n‚úÖ MachineLearningOrchestrator importado com sucesso!')

    const { getDataStructuresOptimizer } = await import('./src/core/DataStructuresOptimizer.js')
    const dsOpt = getDataStructuresOptimizer()
    console.log('‚úÖ DataStructuresOptimizer importado com sucesso!')

    const { getPerformanceProfiler } = await import('./src/core/PerformanceProfiler.js')
    const perfProfiler = getPerformanceProfiler()
    console.log('‚úÖ PerformanceProfiler importado com sucesso!')

    // Database modules
    const { getMLMetricsCollector } = await import('./src/database/core/MLMetricsCollector.js')
    const mlMetrics = getMLMetricsCollector()
    console.log('‚úÖ MLMetricsCollector importado com sucesso!')

    const { getNomenclatureRefactoring } = await import(
      './src/database/core/NomenclatureRefactoring.js'
    )
    const nomenclature = getNomenclatureRefactoring()
    console.log('‚úÖ NomenclatureRefactoring importado com sucesso!')

    console.log('\n‚úÖ TODOS OS M√ìDULOS VERIFICADOS COM SUCESSO!')
  } catch (error) {
    console.error('\n‚ùå ERRO ao importar m√≥dulos:', error)
  }
}

// Executar verifica√ß√£o
verificarModulos().catch(console.error)
