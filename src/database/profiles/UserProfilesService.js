/**
 * @file UserProfilesService.js
 * @description M√©todos para cria√ß√£o, recupera√ß√£o e atualiza√ß√£o de usu√°rios e perfis,
 * incluindo enriquecimento com dados terap√™uticos para suporte a crian√ßas autistas.
 * Movido de utils/shared para database/profiles (organiza√ß√£o correta)
 */

export class UserProfilesService {
  constructor(cache, logger, deduplicatedRequest, authService) {
    this.cache = cache
    this.logger = logger
    this.deduplicatedRequest = deduplicatedRequest
    this.authService = authService
  }

  /**
   * @method createAnonymousUser
   * @async
   * @description Cria um usu√°rio an√¥nimo para acesso inicial.
   * @returns {Promise<string>} ID do usu√°rio criado.
   * @throws {Error} Se a conex√£o com a internet estiver indispon√≠vel.
   */
  async createAnonymousUser() {
    const requestKey = 'create_anonymous_user'
    return this.deduplicatedRequest(requestKey, async () => {
      if (!navigator.onLine) {
        throw new Error('üö® Portal Betina: Internet connection required for user creation')
      }
      try {
        return await this.withRetry(async () => {
          const authResult = await this.authService.createAnonymousUser()
          if (authResult.user) {
            this.cache.set(`user_${authResult.userId}`, authResult.user, 3600000)
          }
          this.logger.info('üåü Portal Betina: Created anonymous user', {
            userId: authResult.userId,
          })
          return authResult.userId
        }, 'createAnonymousUser')
      } catch (error) {
        this.logger.error('üö® Portal Betina: Failed to create user', { error: error.message })
        throw new Error('Portal Betina requires internet connection. Please check your connection.')
      }
    })
  }

  /**
   * @method getUser
   * @async
   * @description Recupera dados de um usu√°rio espec√≠fico.
   * @param {string} userId - ID do usu√°rio.
   * @returns {Promise<Object|null>} Dados do usu√°rio ou null se n√£o encontrado.
   * @throws {Error} Se a conex√£o com a internet estiver indispon√≠vel.
   */
  async getUser(userId) {
    const cacheKey = `user_${userId}`
    const cached = this.cache.get(cacheKey)
    if (cached) {
      this.logger.info('üìã Portal Betina: Retrieved user from cache', { userId })
      return cached
    }

    if (!navigator.onLine) {
      throw new Error('üö® Portal Betina: Internet connection required for user retrieval')
    }

    try {
      return await this.withRetry(async () => {
        const user = await this.authService.getUser(userId)
        if (user) {
          this.cache.set(cacheKey, user, 3600000)
          this.logger.info('üåü Portal Betina: Retrieved user from server', { userId })
        }
        return user
      }, 'getUser')
    } catch (error) {
      this.logger.error('üö® Portal Betina: Failed to get user', { error: error.message, userId })
      throw new Error('Portal Betina requires internet connection. Please check your connection.')
    }
  }

  /**
   * @method updateUserPreferences
   * @async
   * @description Atualiza prefer√™ncias do usu√°rio com dados terap√™uticos.
   * @param {string} userId - ID do usu√°rio.
   * @param {Object} preferences - Prefer√™ncias a serem atualizadas.
   * @returns {Promise<boolean>} Sucesso da opera√ß√£o.
   */
  async updateUserPreferences(userId, preferences) {
    try {
      const enrichedPreferences = this.enrichWithTherapeuticData(preferences)

      const result = await this.withRetry(async () => {
        return await this.authService.updateUserPreferences(userId, enrichedPreferences)
      }, 'updateUserPreferences')

      if (result) {
        // Invalidar cache
        this.cache.delete(`user_${userId}`)
        this.logger.info('üåü Portal Betina: Updated user preferences', { userId })
      }

      return result
    } catch (error) {
      this.logger.error('üö® Portal Betina: Failed to update preferences', {
        error: error.message,
        userId,
      })
      return false
    }
  }

  /**
   * @method enrichWithTherapeuticData
   * @description Enriquece dados do usu√°rio com informa√ß√µes terap√™uticas espec√≠ficas para autismo.
   * @param {Object} userData - Dados do usu√°rio.
   * @returns {Object} Dados enriquecidos.
   */
  enrichWithTherapeuticData(userData) {
    return {
      ...userData,
      therapeuticProfile: {
        autismSupportLevel: userData.autismSupportLevel || 'moderate',
        sensoryPreferences: userData.sensoryPreferences || {},
        communicationStyle: userData.communicationStyle || 'visual',
        motorSkillsLevel: userData.motorSkillsLevel || 'developing',
        socialInteractionPreferences: userData.socialInteractionPreferences || {},
        timestamp: new Date().toISOString(),
      },
    }
  }

  /**
   * @method withRetry
   * @description Executa opera√ß√£o com retry autom√°tico.
   * @param {Function} operation - Opera√ß√£o a ser executada.
   * @param {string} operationName - Nome da opera√ß√£o para logs.
   * @param {number} maxRetries - N√∫mero m√°ximo de tentativas.
   * @returns {Promise<any>} Resultado da opera√ß√£o.
   */
  async withRetry(operation, operationName, maxRetries = 3) {
    for (let i = 0; i < maxRetries; i++) {
      try {
        return await operation()
      } catch (error) {
        if (i === maxRetries - 1) throw error

        const delay = Math.pow(2, i) * 1000 // Exponential backoff
        this.logger.warn(
          `üîÑ Portal Betina: Retrying ${operationName} (attempt ${i + 1}/${maxRetries})`,
          {
            delay,
            error: error.message,
          }
        )

        await new Promise((resolve) => setTimeout(resolve, delay))
      }
    }
  }
}

export default UserProfilesService
